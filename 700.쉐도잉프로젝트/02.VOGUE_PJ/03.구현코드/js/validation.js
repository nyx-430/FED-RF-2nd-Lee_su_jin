// 회원가입 유효성 검사 JS

export default function validateFn (){
    console.log("검사해!");

    /************************************************** 
        [ 사용자 입력폼 유효성 검사 ]
        - 이벤트 종류 : blur(포커스가 빠질 때 발생)
        - 제이쿼리 이벤트 메서드 :  blur()
        - 이벤트 대상 : 
        -> 입력요소 중 text(아이디email2제외),password
            form.logF input[type=text][id!=email2],
            form.logF input[type=password],
        -> 요소 뒤 대괄호는 속성선택자(CSS 원래 문법)
            [id!=email2] !=은 같지 않다(제이쿼리용 문법)
    **************************************************/
    $(`form.logF input[type=text][id!=email2],
    form.logF input[type=password]`)
    .blur(function(){

        /****************************************** 
            1. 현재 블러가 발생한 요소의 아이디는?
        ******************************************/
        let cid = $(this).attr("id");
        // attr(속성명) -> 속성값 읽어오기
        // cid는 current id 즉, 현재 아이디
        
        
        /****************************************** 
         2. 현재 블러가 발생한 요소의 값은?
         ******************************************/
        let cv = $(this).val();
        // val() -> 입력값 읽어오기
        // trim() -> 앞뒤 공백 제거
        // cv는 current value 즉, 현재값

        // trim()은 중간 공백 제거는 안 하므로
        // 모든 공백을 제거하는 함수를 만들어 쓴다!
        const groSpace = x => x.replace(/\s/g,"");
        // 정규식은 슬래쉬(/) 사이에 쓰며
        // \s는 스페이스 기호이고, g는 전역(global) 플래그다!
        // 플래그(flag)는 기술용어로 처리 표시 기호를 뜻한다!

        cv = groSpace(cv);

        // 공백 제거 후 입력창에 반영시켜 준다!
        $(this).val(cv);
        
        console.log("현재 아이디:",cid,"\n값:",cv);

        /****************************************** 
            3. 빈값 여부 검사하기 (필수입력항목)
        ******************************************/
        if(cv==""){
            // 메시지 출력하기
            $(this).siblings(".msg").text("필수입력");
            // 형제요소들 중 .msg인 요소에 글자를 출력함
            // 형제요소 선택은 sibligns(특정이름)
        } /// if ///
        else{
            // 메시지 지우기
            $(this).siblings(".msg").text("");
        } /// else ///


        /****************************************** 
            4. 아이디일 경우 유효성 검사
            - 검사기준: 
            영문자로 시작하는 6~20글자 영문자/숫자
        ******************************************/

        /****************************************** 
            5. 비밀번호일 경우 유효성 검사
            - 검사기준: 
            특수문자,문자,숫자포함 형태의 5~15자리
        ******************************************/

        /****************************************** 
            6. 비밀번호 확인일 경우 유효성 검사
            - 검사기준: 비빌번호 항목과 일치 여부
        ******************************************/

        /****************************************** 
            7. 이메일 유효성 검사
            - 검사기준: 이메일 형식에 맞는지 여부
        ******************************************/


    }); /////////// blur 함수 ///////////



} ////////// validateFn 함수 //////////